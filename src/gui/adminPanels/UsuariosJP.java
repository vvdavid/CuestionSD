package gui.adminPanels;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.UUID;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import jdbc.UsuarioJDBC;
import tools.GUITools;

public class UsuariosJP extends javax.swing.JPanel implements Updateable {

    private Driver driver;

    /**
     * Creates new form UsuariosJP
     */
    public UsuariosJP() {
        initComponents();
        driver = new Driver();
        addListeners();
    }

    private void addListeners() {
        agregarUsuariosJB.addActionListener(driver);
        modificarNombreJB.addActionListener(driver);
        reiniciaPassJB.addActionListener(driver);
        eliminarUsuariosJB.addActionListener(driver);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaUsuariosJT = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        agregarUsuariosJB = new javax.swing.JButton();
        modificarNombreJB = new javax.swing.JButton();
        eliminarUsuariosJB = new javax.swing.JButton();
        reiniciaPassJB = new javax.swing.JButton();

        tablaUsuariosJT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Hash"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaUsuariosJT.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaUsuariosJT.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaUsuariosJT);
        if (tablaUsuariosJT.getColumnModel().getColumnCount() > 0) {
            tablaUsuariosJT.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));
        jPanel2.setPreferredSize(new java.awt.Dimension(178, 237));

        agregarUsuariosJB.setText("Agregar");

        modificarNombreJB.setText("Modificar nombre");

        eliminarUsuariosJB.setText("Eliminar");
        eliminarUsuariosJB.setToolTipText("Solo es posible un examen si no tiene historial de algún usuario");

        reiniciaPassJB.setText("Reiniciar contraseña");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modificarNombreJB, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(agregarUsuariosJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eliminarUsuariosJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reiniciaPassJB, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(agregarUsuariosJB)
                .addGap(18, 18, 18)
                .addComponent(modificarNombreJB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reiniciaPassJB)
                .addGap(18, 18, 18)
                .addComponent(eliminarUsuariosJB)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton agregarUsuariosJB;
    public javax.swing.JButton eliminarUsuariosJB;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JButton modificarNombreJB;
    public javax.swing.JButton reiniciaPassJB;
    public javax.swing.JTable tablaUsuariosJT;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateData() {
        driver.updateData();
    }

    private class Driver implements Updateable, ActionListener {

        @Override
        public void updateData() {
            UsuarioJDBC.cargaTabla(tablaUsuariosJT);
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            JButton src = (JButton) ae.getSource();
            if (src == agregarUsuariosJB) {
                agrega();
            } else if (src == modificarNombreJB) {
                if (tablaUsuariosJT.getSelectedRow() != -1) {
                    modificaNombre();
                }
            } else if (src == reiniciaPassJB) {
                if (tablaUsuariosJT.getSelectedRow() != -1) {
                    reiniciaPass();
                }
            } else if (src == eliminarUsuariosJB) {
                if (tablaUsuariosJT.getSelectedRow() != -1) {
                    elimina();
                }
            } else {
                throw new UnsupportedOperationException();
            }
        }

        private void agrega() {
            String nombre;
            nombre = JOptionPane.showInputDialog(UsuariosJP.this, "Nombre de usuario:", "Nuevo usuario", JOptionPane.QUESTION_MESSAGE);
            if (nombre == null) {
                return;
            }
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(UsuariosJP.this, "Inserte un nombre de usuario válido", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String password = newPassword();
            if (UsuarioJDBC.agrega(nombre, GUITools.encrypt(password))) {
                updateData();
                JOptionPane.showMessageDialog(UsuariosJP.this, "Usuario agregado. Contraseña: " + password, "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(UsuariosJP.this, "Los nombres de usuario deben ser únicos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        private void modificaNombre() {
            String nombre;
            nombre = JOptionPane.showInputDialog(UsuariosJP.this, "Nombre de usuario:", "Nuevo usuario", JOptionPane.QUESTION_MESSAGE);
            if (nombre == null) {
                return;
            }
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(UsuariosJP.this, "Inserte un nombre de usuario válido", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            UsuarioJDBC.actualiza(Integer.parseInt(tablaUsuariosJT.getValueAt(tablaUsuariosJT.getSelectedRow(), 0).toString().toString()),
                    nombre,
                    tablaUsuariosJT.getValueAt(tablaUsuariosJT.getSelectedRow(), 2).toString());
            updateData();
            JOptionPane.showMessageDialog(UsuariosJP.this, "Usuario modificado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }

        private void elimina() {
            int res = JOptionPane.showConfirmDialog(UsuariosJP.this, "¿Seguro que desea eliminar el usuario seleccionado y toda su información? Esta acción no se puede deshacer", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (res == JOptionPane.OK_OPTION) {
                UsuarioJDBC.elimina(tablaUsuariosJT.getValueAt(tablaUsuariosJT.getSelectedRow(), 0).toString());
                updateData();
            }
        }

        private void reiniciaPass() {
            int res = JOptionPane.showConfirmDialog(UsuariosJP.this, "¿Seguro que desea inicializar la contraseña del usuario seleccionado?", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (res == JOptionPane.OK_OPTION) {
                String password = newPassword();
                UsuarioJDBC.actualiza(Integer.parseInt(tablaUsuariosJT.getValueAt(tablaUsuariosJT.getSelectedRow(), 0).toString().toString()),
                        tablaUsuariosJT.getValueAt(tablaUsuariosJT.getSelectedRow(), 1).toString().toString(),
                        GUITools.encrypt(password));
                JOptionPane.showMessageDialog(UsuariosJP.this, "Contraseña: " + password, "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }
            updateData();
        }

        private String newPassword() {
            return UUID.randomUUID().toString().replaceAll("-", "").substring(28);
        }
    }
}
